{"version":3,"sources":["apis/athena.js","components/SearchField/SearchField.jsx","components/AncientsList/GodCard.jsx","components/AncientsList/AncientsList.jsx","tools.js","components/Ancients.jsx","components/OracleError/OracleError.jsx","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","SearchField","state","term","e","_this2","this","setState","target","value","props","onSearchTermChange","_this3","react_default","a","createElement","className","type","placeholder","onChange","onInputChange","Component","GodCard","_ref","god","era","distanceInWordsToNow","parse","end_of_an_era","addSuffix","src","name","includes","alt","height","superpower","toUpperCase","AncientsList","gods","map","components_AncientsList_GodCard","key","generateListItems","_UpperCaseObject","lObj","obj","Object","objectSpread","i","Ancients","isLoading","memoizedSearchGod","_","memoize","_this","searchGods","_callee","regenerator_default","wrap","_context","prev","next","getGods","sent","setGods","stop","arr","item","athena","get","response","data","console","log","_context2","t0","searchTerm","params","search","ancients","_context3","debounce","react_loader_spinner_default","color","width","components_SearchField_SearchField","components_AncientsList_AncientsList","OracleError","OracleMessage","error","getProphecy","onClick","App","components_Ancients","components_OracleError_OracleError","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61bddf2e.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://athena-7.herokuapp.com/ancients.json'\r\n});\r\n","import React, { Component } from 'react';\r\nimport './SearchField.css';\r\n\r\nclass SearchField extends Component {\r\n  state = { term: '' };\r\n\r\n  onInputChange(e) {\r\n    this.setState({ term: e.target.value }, () => {\r\n      this.props.onSearchTermChange(this.state.term);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label>Filter gods:</label>\r\n        <input\r\n          className='searchInput'\r\n          type='text'\r\n          value={this.state.term}\r\n          placeholder='start typing to filter'\r\n          onChange={e => this.onInputChange(e)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchField;\r\n","import React from 'react';\r\nimport { parse, distanceInWordsToNow } from 'date-fns';\r\nimport './GodCard.css';\r\n\r\nconst GodCard = ({ god }) => {\r\n  const era = distanceInWordsToNow(parse(god.end_of_an_era), {\r\n    addSuffix: true\r\n  });\r\n\r\n  const getPicture = () => {\r\n    if (god.name.includes('ZEUS')) return '/images/zeus.svg';\r\n    if (god.name.includes('ATHENA')) return '/images/athena.svg';\r\n    if (god.name.includes('NEPTUNE')) return '/images/neptune.svg';\r\n    return '/images/masks.svg';\r\n  };\r\n\r\n  return (\r\n    <div className='godCard'>\r\n      <img src={getPicture()} alt='god' height='85px' />\r\n      <div className='godCard__text'>\r\n        <div>\r\n          Name: <strong>{god.name}</strong>\r\n        </div>\r\n        <div>Superpower: {god.superpower} </div>\r\n        <div>End of an era: {era.toUpperCase()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GodCard;\r\n","import React from 'react';\r\nimport GodCard from './GodCard';\r\nimport './AncientsList.css';\r\n\r\nconst AncientsList = props => {\r\n  const generateListItems = () => {\r\n    if (props.gods) {\r\n      return props.gods.map(god => <GodCard key={god.name} god={god} />);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Meet the Ancients</h2>\r\n      <div className='ancientsList'>{generateListItems()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AncientsList;\r\n","//no time to do validations on function params\r\n\r\nexport const UpperCaseArrayObjects = arr => {\r\n  return arr.map(item => _UpperCaseObject(item));\r\n};\r\n\r\nconst _UpperCaseObject = lObj => {\r\n  let obj = { ...lObj };\r\n  for (let i in obj) {\r\n    obj[i] = obj[i].toUpperCase();\r\n  }\r\n  return obj;\r\n};\r\n","import React, { Component } from 'react';\r\nimport athena from '../apis/athena';\r\nimport _ from 'lodash';\r\nimport SearchField from './SearchField/SearchField';\r\nimport AncientsList from './AncientsList/AncientsList';\r\nimport { UpperCaseArrayObjects } from '../tools';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nclass Ancients extends Component {\r\n  state = {\r\n    isLoading: true,\r\n    gods: []\r\n  };\r\n\r\n  setGods(gods) {\r\n    this.setState({ gods: UpperCaseArrayObjects(gods) });\r\n  }\r\n\r\n  async getGods() {\r\n    try {\r\n      const response = await athena.get('');\r\n      this.setGods(response.data);\r\n      this.setState({ isLoading: false });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async searchGods(searchTerm) {\r\n    try {\r\n      const response = await athena.get('', {\r\n        params: { search: searchTerm }\r\n      });\r\n      return response.data.ancients;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  memoizedSearchGod = _.memoize(this.searchGods);\r\n\r\n  componentDidMount() {\r\n    this.getGods();\r\n  }\r\n\r\n  onSearchTermChange = async term => {\r\n    if (term === '') {\r\n      this.getGods();\r\n    } else {\r\n      const gods = await this.memoizedSearchGod(term);\r\n      this.setGods(gods);\r\n      this.setState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const onSearchTermChange = _.debounce(term => {\r\n      this.onSearchTermChange(term);\r\n    }, 300);\r\n\r\n    return !this.state.isLoading ? (\r\n      <div className='centered'>\r\n        <SearchField onSearchTermChange={onSearchTermChange} />\r\n        <AncientsList gods={this.state.gods} />\r\n      </div>\r\n    ) : (\r\n      <div className='centered loader'>\r\n        <Loader type='Ball-Triangle' color='black' height='100' width='100' />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Ancients;\r\n","import React, { Component } from 'react';\r\nimport athena from '../../apis/athena.js';\r\nimport './OracleError.css';\r\n\r\nclass OracleError extends Component {\r\n  state = { OracleMessage: 'Click me to receive the prophecy', error: false };\r\n\r\n  getProphecy = async () => {\r\n    try {\r\n      await athena.get('', {\r\n        params: { error: true }\r\n      });\r\n    } catch (error) {\r\n      this.setState({ OracleMessage: error.response.data.error, error: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='centered animated-from-bottom--fast'>\r\n        <button\r\n          type='button'\r\n          onClick={this.getProphecy}\r\n          className={this.state.error === true ? 'error' : ''}\r\n        >\r\n          {this.state.OracleMessage}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OracleError;\r\n","import React from 'react';\nimport Ancients from './components/Ancients';\nimport OracleError from './components/OracleError/OracleError';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className='container'>\n      <h1 className='centered'>Gods of Ancient Times</h1>\n      <Ancients />\n      <OracleError />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}